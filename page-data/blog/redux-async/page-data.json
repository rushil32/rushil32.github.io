{"componentChunkName":"component---src-templates-blog-template-js","path":"/blog/redux-async","webpackCompilationHash":"e61b10cecde379bc70f5","result":{"data":{"markdownRemark":{"html":"<h2>Actions</h2>\n<p>Most API requests dispatch atleast three actions:</p>\n<ol>\n<li>An action informing the reducers that the request began</li>\n<li>An action informing the reducers that the request finished successfully</li>\n<li>An action informing the reducers that the request failed</li>\n</ol>\n<p>--split--</p>\n<p>Either record request state as a seperate attribute in the action - </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_POSTS'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_POSTS'</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Oops'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_POSTS'</span><span class=\"token punctuation\">,</span> status<span class=\"token punctuation\">:</span> <span class=\"token string\">'success'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Or, create different action types -</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_POSTS_REQUEST'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_POSTS_FAILURE'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">:</span> <span class=\"token string\">'Oops'</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span> type<span class=\"token punctuation\">:</span> <span class=\"token string\">'FETCH_POSTS_SUCCESS'</span><span class=\"token punctuation\">,</span> response<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Seperate actions reduce the chance of mistakes</p>\n<p>--split--</p>\n<h2>Middleware for Async actions</h2>\n<p>Without middleware, Redux store only supports synchronous data flow. This is what you get by default with <code class=\"language-text\">createStore()</code>.</p>\n<p>You may enhance <code class=\"language-text\">createStore()</code> with <code class=\"language-text\">applyMiddleware()</code>. It is not required, but it lets you express asynchronous actions in a convenient way.</p>\n<p>Asynchronous middleware like redux-thunk or redux-promise wraps the store's dispatch() method and allows you to dispatch something other than actions, for example, functions or Promises. Any middleware you use can then intercept anything you dispatch, and in turn, can pass actions to the next middleware in the chain. For example, a Promise middleware can intercept Promises and dispatch a pair of begin/end actions asynchronously in response to each Promise.</p>\n<p>When the last middleware in the chain dispatches an action, it has to be a plain object. This is when the synchronous Redux data flow takes place.</p>\n<p>--split--</p>\n<h2>Thunk middleware</h2>\n<p>By using the Redux Thunk middleware, an action creator can return a function instead of an action object. This way, the action creator becomes a thunk.</p>\n<p>When an action creator returns a function, that function will get executed by the Redux Thunk middleware. This function doesn't need to be pure; it is thus allowed to have side effects, including executing asynchronous API calls. The function can also dispatch actions—like those synchronous actions we defined earlier.</p>\n<p>--split--</p>\n<p>Sample thunk - </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">fetchPosts</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">subreddit</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// It passes the dispatch method as an argument to the function,</span>\n  <span class=\"token comment\">// thus making it able to dispatch actions itself.</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">dispatch</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">requestPosts</span><span class=\"token punctuation\">(</span>subreddit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">https://www.reddit.com/r/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subreddit<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">.json</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>\n        <span class=\"token parameter\">response</span> <span class=\"token operator\">=></span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'An error occurred.'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">json</span> <span class=\"token operator\">=></span>\n        <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">receivePosts</span><span class=\"token punctuation\">(</span>subreddit<span class=\"token punctuation\">,</span> json<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>--split--</p>\n<h2>What’s a thunk?!</h2>\n<p>A thunk is a function that wraps an expression to delay its evaluation.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// calculation of 1 + 2 is immediate</span>\n<span class=\"token comment\">// x === 3</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// calculation of 1 + 2 is delayed</span>\n<span class=\"token comment\">// foo can be called later to perform the calculation</span>\n<span class=\"token comment\">// foo is a thunk!</span>\n<span class=\"token keyword\">let</span> <span class=\"token function-variable function\">foo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span></code></pre></div>","frontmatter":{"date":"August 29, 2019","path":"/blog/redux-async","title":"Async actions in redux","author":"Rushil Saraogi","category":"Redux"}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}